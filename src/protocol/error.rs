use thiserror::Error;

use std::fmt;


#[derive(Debug, Error)]
/// Represents all errors generated by this library
pub enum RadiusError {
    #[error("Verification failed for incoming Radius packet")]
    /// Error happens, when Radius Packet fails validation
    ValidationError         { error: String },
    #[error("Radius packet is malformed")]
    /// Error happens, when packet has been badly constructed or got corrupted
    MalformedPacket         { error: String },
    #[error("Radius packet attribute is malformed")]
    /// Error happens, when attribute has been badly constructed or got corrupted
    MalformedAttribute      { error: String },
    #[error("Provided IPv6 address is malformed")]
    /// Error happens, when IPv6 Address was badly added to Radius Packet or got corrupted
    MalformedIpAddr         { error: String },
    #[error(transparent)]
    /// Error happens, when there is some sort of connection error between sockets, or socket
    /// cannot bind to the given hostname/port
    SocketConnectionError(#[from] std::io::Error),
    #[error("Invalid socket connection")]
    SocketInvalidConnection { error: String },
    #[error(transparent)]
    /// Error happens, when socket cannot parse given hostname/port
    SocketAddrParseError(#[from] std::net::AddrParseError),
    #[error("Dictionary is malformed or inaccessible")]
    /// Error happens, when dictionary file cannot be parsed
    MalformedDictionary     { error: std::io::Error },
}


#[derive(Debug, PartialEq)]
pub struct MalformedPacket(String);

impl MalformedPacket {
    pub fn new(msg: String) -> MalformedPacket {
        MalformedPacket(msg)
    }
}

impl fmt::Display for MalformedPacket {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "malformed RADIUS packet: \"{}\"", self.0)
    }
}

impl std::error::Error for MalformedPacket {
    fn description(&self) -> &str {
        "RADIUS packet contains unsupported attributes"
    }
}


#[derive(Debug, PartialEq)]
pub struct MalformedAttribute(String);

impl MalformedAttribute {
    pub fn new(msg: String) -> MalformedAttribute {
        MalformedAttribute(msg)
    }
}

impl fmt::Display for MalformedAttribute {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "malformed RADIUS packet attribute: \"{}\"", self.0)
    }
}

impl std::error::Error for MalformedAttribute {
    fn description(&self) -> &str {
        "RADIUS packet attribute is malformed"
    }
}


#[derive(Debug)]
pub struct MalformedIpAddr(String);

impl MalformedIpAddr {
    pub fn new(msg: String) -> MalformedIpAddr {
        MalformedIpAddr(msg)
    }
}


impl fmt::Display for MalformedIpAddr {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "malformed address: \"{}\"", self.0)
    }
}

impl std::error::Error for MalformedIpAddr {
    fn description(&self) -> &str {
        "the string cannot be parsed as an IP address"
    }
}
